[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "sheet-scraper"
version = "0.2.0"
description = "A tool to scrape product prices from supplier websites and update a Google Sheet."
authors = [
    { name = "Gemini", email = "gemini@google.com" },
]
dependencies = [
    "playwright",
    "undetected-playwright",
    "google-api-python-client",
    "google-auth-httplib2",
    "google-auth-oauthlib",
    "pytest",
    "requests",
    "2captcha-python",
    "flask>=2.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-asyncio",
    "pytest-benchmark",
    "ruff",
    "black",
    "isort",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "pytest-asyncio>=0.21",
    "pytest-benchmark>=5.0",
    "pytest-xdist>=3.0",
]

[project.scripts]
sheet-scraper = "sheet_scraper.sheet_scraper:main"

[tool.pytest.ini_options]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests between components",
    "slow: Tests that take longer to run",
    "web: Tests requiring web interaction",
    "config: Configuration and setup tests",
    "core: Core functionality tests",
    "scraping: Web scraping related tests",
    "infrastructure: Infrastructure component tests",
    "benchmark: Performance benchmark tests",
]

[tool.pytest-benchmark]
# Benchmark configuration
min_rounds = 5
max_time = 5.0
min_time = 0.000005
sort = "mean"
histogram = true
save = ".benchmarks"
save_data = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"tests/*" = ["E501"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
